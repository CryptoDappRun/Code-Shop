<!DOCTYPE html>
<html>
<head>
    <title>Admin Panel - Code Shop</title>
    <link href="/css/output.css" rel="stylesheet">
</head>
<body class="bg-gray-900 text-white min-h-screen flex">
    <div id="toast-container" class="fixed top-4 right-4 z-50"></div>
    <aside class="bg-gray-800 w-64 p-6 shadow-lg">
        <h2 class="text-2xl font-bold mb-6">Admin Panel</h2>
        <nav>
            <ul class="space-y-4">
                <li><a href="#" onclick="showSection('dashboard-section')" class="text-gray-300 hover:text-white font-medium">Dashboard</a></li>
                <li><a href="#" onclick="showSection('add-campaign-section')" class="text-gray-300 hover:text-white font-medium">Add Campaign</a></li>
                <li><a href="#" onclick="showSection('delete-campaign-section')" class="text-gray-300 hover:text-white font-medium">Delete Campaign</a></li>
                <li><a href="#" onclick="showSection('payments-section')" class="text-gray-300 hover:text-white font-medium">Payments Management</a></li>
                <li><a href="#" onclick="showSection('transactions-section')" id="transactions-link" class="text-gray-300 hover:text-white font-medium">Transactions</a></li>
                <li><a href="/" class="text-gray-300 hover:text-white font-medium">Back to Shop</a></li>
            </ul>
        </nav>
    </aside>

    <main class="flex-1 p-8">
        <h1 class="text-3xl font-bold mb-8">Manage Campaigns</h1>

        <!-- Dashboard Section (Placeholder) -->
        <section id="dashboard-section" class="bg-gray-800 rounded-lg shadow-lg p-6 mb-8 hidden">
            <h2 class="text-2xl font-semibold mb-4">Dashboard</h2>
            <p class="text-gray-300">Welcome to the Admin Dashboard. Select a section from the menu to manage campaigns, payments, or transactions.</p>
        </section>

        <!-- Add New Campaign Section -->
        <section id="add-campaign-section" class="bg-gray-800 rounded-lg shadow-lg p-6 mb-8">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-semibold">Campaign Management</h2>
                <select id="campaignSelect" onchange="loadCampaignData()" class="p-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">Select a Campaign</option>
                    <!-- Options populated dynamically -->
                </select>
            </div>
            <form id="addCampaignForm" class="space-y-4" enctype="multipart/form-data">
                <div>
                    <label class="block text-sm font-medium text-gray-300">Name</label>
                    <input type="text" name="name" id="campaignName" class="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-300">Commodity</label>
                    <input type="text" name="commodity" id="campaignCommodity" class="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-300">Commodity Description</label>
                    <textarea name="description" id="campaignDescription" class="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500" rows="4"></textarea>
                </div>
                <% if (allowImageUpload) { %>
                    <div>
                        <label class="block text-sm font-medium text-gray-300">Commodity Image</label>
                        <input type="file" name="imageFile" id="campaignImage" accept="image/*" class="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white">
                        <img id="currentImage" src="" alt="Current Image" class="mt-2 hidden" style="max-width: 200px;">
                    </div>
                <% } %>
                <div>
                    <label class="block text-sm font-medium text-gray-300">Commodity Price (USD)</label>
                    <input type="number" name="price" id="campaignPrice" step="0.01" class="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-300">Codes (CSV File or Text)</label>
                    <input type="file" name="codesFile" id="codesFile" accept=".csv" class="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white">
                    <textarea name="codesText" id="campaignCodes" class="mt-2 w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white" rows="4" placeholder="Enter codes, one per line (used if no CSV file)"></textarea>
                </div>
                <div>
                    <label class="flex items-center text-gray-300">
                        <input type="checkbox" name="isFree" id="campaignIsFree" class="mr-2 h-5 w-5 text-blue-500 bg-gray-700 border-gray-600 rounded focus:ring-blue-500" onchange="togglePrice()">
                        Free Campaign (sets price to 0)
                    </label>
                </div>
                <div class="flex space-x-4">
                    <button type="submit" id="addCampaignBtn" class="w-full bg-gradient-to-r from-green-500 to-teal-600 text-white font-medium py-3 rounded-lg hover:from-green-600 hover:to-teal-700 transition-colors duration-200">Add Campaign</button>
                    <button type="button" id="modifyCampaignBtn" onclick="modifyCampaign()" disabled class="w-full bg-gradient-to-r from-blue-500 to-indigo-600 text-white font-medium py-3 rounded-lg hover:from-blue-600 hover:to-indigo-700 transition-colors duration-200">Modify Campaign</button>
                </div>
            </form>
            <div id="codes-list" class="mt-4"></div>
        </section>

        <!-- Delete Campaign Section -->
        <section id="delete-campaign-section" class="bg-gray-800 rounded-lg shadow-lg p-6 mb-8 hidden">
            <h2 class="text-2xl font-semibold mb-4">Delete Campaign</h2>
            <div id="campaigns-list" class="space-y-4"></div>
        </section>

        <!-- Payments Management Section -->
        <section id="payments-section" class="bg-gray-800 rounded-lg shadow-lg p-6 mb-8 hidden">
            <h2 class="text-2xl font-semibold mb-4">Payments Management</h2>
            <div class="flex space-x-4 mb-4">
                <select id="payment-method-select" class="p-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500">
                   <!--
                   <option value="BTC">Bitcoin (BTC)</option>
					<option value="DOGE">Dogecoin (DOGE)</option>
                   --> 
                    <option value="ETH">Ethereum (ETH)</option>
                    
                    <option value="POL">Polygon (POL)</option>
                    <option value="BNB">Binance Smart Chain (BNB)</option>
                    <option value="AVAX">Avalanche (AVAX)</option>
                </select>
                <button id="add-payment-method" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">Add Payment Method</button>
            </div>
            <div id="payment-methods-list" class="space-y-2"></div>
        </section>

        <!-- Transactions Section -->
        <section id="transactions-section" class="bg-gray-800 rounded-lg shadow-lg p-6 hidden">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-semibold">Transactions</h2>
                <div>
                    <label for="status-filter" class="text-gray-300 mr-2">Filter:</label>
                    <select id="status-filter" class="p-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="">All</option>
                        <option value="pending">Pending</option>
                        <option value="completed">Completed</option>
                        <option value="expired">Expired</option>
                    </select>
                </div>
            </div>
            <div class="overflow-x-auto">
                <table class="w-full text-left">
                    <thead>
                        <tr class="bg-gray-700">
                            <th class="p-3">ID</th>
                            <th class="p-3">Campaign</th>
                            <th class="p-3">Amount (USD)</th>
                            <th class="p-3">Crypto Amount</th>
                            <th class="p-3">Address</th>
                         
                            <th class="p-3">Status</th>
                            <th class="p-3">Code</th>
                            <th class="p-3">Created At</th>
                            <th class="p-3">Action</th>
                        </tr>
                    </thead>
                    <tbody id="transactions-table"></tbody>
                </table>
            </div>
            <div class="mt-4 flex justify-between">
                <button id="prev-page" class="bg-gray-700 text-white px-4 py-2 rounded hover:bg-gray-600 disabled:opacity-50" disabled>Previous</button>
                <span id="page-info" class="text-gray-300"></span>
                <button id="next-page" class="bg-gray-700 text-white px-4 py-2 rounded hover:bg-gray-600 disabled:opacity-50">Next</button>
            </div>
        </section>
    </main>

    <script>
        let selectedCampaignId = null;
        const urlParams = new URLSearchParams(window.location.search);
        const password = urlParams.get('password');

        function showToast(message, type = 'success') {
            const toastContainer = document.getElementById('toast-container');
            const toast = document.createElement('div');
            toast.className = `toast p-4 mb-2 rounded-lg shadow-lg text-white animate-fade-in-out ${
                type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-yellow-500'
            }`;
            toast.textContent = message;
            toastContainer.appendChild(toast);
            setTimeout(() => {
                toast.classList.add('opacity-0');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        function showSection(sectionId) {
            const sections = [
                'dashboard-section',
                'add-campaign-section',
                'delete-campaign-section',
                'payments-section',
                'transactions-section'
            ];
            sections.forEach(id => {
                const section = document.getElementById(id);
                if (id === sectionId) {
                    section.classList.remove('hidden');
                    if (id === 'transactions-section') fetchTransactions(currentPage, currentFilter);
                    if (id === 'add-campaign-section') populateCampaignSelect();
                } else {
                    section.classList.add('hidden');
                }
            });
        }

        async function populateCampaignSelect() {
            const response = await fetch(`/admin/campaigns?password=${password}`);
            const campaigns = await response.json();
            const select = document.getElementById('campaignSelect');
            select.innerHTML = '<option value="">Select a Campaign</option>';
            campaigns.forEach(campaign => {
                const option = document.createElement('option');
                option.value = campaign._id;
                option.textContent = campaign.name;
                select.appendChild(option);
            });
        }

        async function loadCampaignData() {
            const select = document.getElementById('campaignSelect');
            selectedCampaignId = select.value;
            const modifyBtn = document.getElementById('modifyCampaignBtn');
            const form = document.getElementById('addCampaignForm');

            if (!selectedCampaignId) {
                form.reset();
                document.getElementById('codes-list').innerHTML = '';
                <% if (allowImageUpload) { %>
                    document.getElementById('currentImage').classList.add('hidden');
                <% } %>
                modifyBtn.disabled = true;
                return;
            }

            modifyBtn.disabled = false;
            const response = await fetch(`/admin/campaigns?password=${password}`);
            const campaigns = await response.json();
            const campaign = campaigns.find(c => c._id === selectedCampaignId);

            if (campaign) {
                document.getElementById('campaignName').value = campaign.name || '';
                document.getElementById('campaignCommodity').value = campaign.commodity || '';
                document.getElementById('campaignDescription').value = campaign.description || '';
                document.getElementById('campaignPrice').value = campaign.price || '';
                document.getElementById('campaignIsFree').checked = campaign.isFree;
                document.getElementById('campaignCodes').value = campaign.codes.map(code => code.code).join('\n');
                <% if (allowImageUpload) { %>
                    const currentImage = document.getElementById('currentImage');
                    currentImage.src = campaign.image || '/uploads/default-commodity.jpg';
                    currentImage.classList.remove('hidden');
                <% } %>
                togglePrice();
                displayUploadedCodes(campaign);
            }
        }

        function togglePrice() {
            const isFree = document.getElementById('campaignIsFree').checked;
            const priceInput = document.getElementById('campaignPrice');
            priceInput.disabled = isFree;
            if (isFree) priceInput.value = '0';
        }

        document.getElementById('addCampaignForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            if (selectedCampaignId) return; // Prevent submission if modifying

            const formData = new FormData(e.target);
            const codesText = formData.get('codesText');
            if (codesText && !formData.get('codesFile').name) {
                const codes = codesText.split('\n').map(code => ({ code: code.trim() })).filter(code => code.code);
                formData.delete('codesText');
                formData.append('codes', JSON.stringify(codes));
            }

            const response = await fetch(`/admin/campaign?password=${password}`, {
                method: 'POST',
                body: formData
            });
            const result = await response.json();

            if (response.ok) {
                showToast('Campaign added successfully!', 'success');
                displayUploadedCodes(result.campaign);
                e.target.reset();
                populateCampaignSelect();
            } else {
                showToast('Error: ' + result.error, 'error');
            }
        });

        async function modifyCampaign() {
            if (!selectedCampaignId) return;

            const formData = new FormData(document.getElementById('addCampaignForm'));
            const codesText = formData.get('codesText');
            if (codesText && !formData.get('codesFile').name) {
                const codes = codesText.split('\n').map(code => ({ code: code.trim() })).filter(code => code.code);
                formData.delete('codesText');
                formData.append('codes', JSON.stringify(codes));
            }

            const response = await fetch(`/admin/campaign/${selectedCampaignId}?password=${password}`, {
                method: 'PUT',
                body: formData
            });
            const result = await response.json();

            if (response.ok) {
                showToast('Campaign modified successfully!', 'success');
                displayUploadedCodes(result.campaign);
                document.getElementById('addCampaignForm').reset();
                selectedCampaignId = null;
                document.getElementById('campaignSelect').value = '';
                populateCampaignSelect();
            } else {
                showToast('Error: ' + result.error, 'error');
            }
        }

        function displayUploadedCodes(campaign) {
            const codesList = document.getElementById('codes-list');
            codesList.innerHTML = '<h3 class="text-xl font-semibold mb-2">Uploaded Codes</h3>';
            const ul = document.createElement('ul');
            ul.className = 'space-y-2';

            campaign.codes.forEach((codeObj, index) => {
                const li = document.createElement('li');
                li.className = 'flex justify-between items-center bg-gray-700 p-2 rounded';
                li.innerHTML = `
                    <span>${codeObj.code}</span>
                    <button onclick="deleteCode('${campaign._id}', ${index})" class="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600">Delete</button>
                `;
                ul.appendChild(li);
            });

            codesList.appendChild(ul);
            fetchCampaigns();
        }

        async function deleteCode(campaignId, codeIndex) {
            if (!confirm('Are you sure you want to delete this code?')) return;

            const response = await fetch(`/admin/campaign/${campaignId}/code/${codeIndex}?password=${password}`, {
                method: 'DELETE'
            });
            const result = await response.json();

            if (response.ok) {
                showToast('Code deleted successfully!', 'success');
                fetch(`/admin/campaigns?password=${password}`)
                    .then(res => res.json())
                    .then(campaigns => {
                        const campaign = campaigns.find(c => c._id === campaignId);
                        displayUploadedCodes(campaign);
                    });
            } else {
                showToast('Error: ' + result.error, 'error');
            }
        }

        async function fetchCampaigns() {
            const response = await fetch(`/admin/campaigns?password=${password}`);
            const campaigns = await response.json();
            const campaignsList = document.getElementById('campaigns-list');
            campaignsList.innerHTML = '';

            campaigns.forEach(campaign => {
                const div = document.createElement('div');
                div.className = 'flex justify-between items-center bg-gray-700 p-2 rounded';
                div.innerHTML = `
                    <span>${campaign.name} (${campaign.commodity}, $${campaign.price} USD)</span>
                    <button onclick="deleteCampaign('${campaign._id}')" class="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600">Delete</button>
                `;
                campaignsList.appendChild(div);
            });
        }

        async function deleteCampaign(id) {
            if (!confirm('Are you sure you want to delete this campaign?')) return;

            const response = await fetch(`/admin/campaign/${id}?password=${password}`, {
                method: 'DELETE'
            });
            const result = await response.json();

            if (response.ok) {
                showToast('Campaign deleted successfully!', 'success');
                fetchCampaigns();
            } else {
                showToast('Error: ' + result.error, 'error');
            }
        }

        fetchCampaigns();

        async function fetchPaymentMethods() {
            const response = await fetch(`/admin/payment-methods?password=${password}`);
            const methods = await response.json();
            const methodsList = document.getElementById('payment-methods-list');
            methodsList.innerHTML = '';

            methods.forEach(method => {
                const div = document.createElement('div');
                div.className = 'flex justify-between items-center bg-gray-700 p-2 rounded';
                div.innerHTML = `
                    <span>${method}</span>
                    <button onclick="removePaymentMethod('${method}')" class="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600">Remove</button>
                `;
                methodsList.appendChild(div);
            });
        }

        document.getElementById('add-payment-method').addEventListener('click', async () => {
            const method = document.getElementById('payment-method-select').value;
            const response = await fetch(`/admin/payment-methods?password=${password}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ method })
            });
            const result = await response.json();

            if (response.ok) {
                showToast(result.message, 'success');
                fetchPaymentMethods();
            } else {
                showToast('Error: ' + result.error, 'error');
            }
        });

        async function removePaymentMethod(method) {
            if (!confirm(`Are you sure you want to remove ${method}?`)) return;

            const response = await fetch(`/admin/payment-methods/${method}?password=${password}`, {
                method: 'DELETE'
            });
            const result = await response.json();

            if (response.ok) {
                showToast(result.message, 'success');
                fetchPaymentMethods();
            } else {
                showToast('Error: ' + result.error, 'error');
            }
        }

        fetchPaymentMethods();

        let currentPage = 1;
        let currentFilter = '';

        document.getElementById('transactions-link').addEventListener('click', (e) => {
            e.preventDefault();
            showSection('transactions-section');
        });

        document.getElementById('status-filter').addEventListener('change', (e) => {
            currentFilter = e.target.value;
            currentPage = 1;
            fetchTransactions(currentPage, currentFilter);
        });

        document.getElementById('prev-page').addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                fetchTransactions(currentPage, currentFilter);
            }
        });

        document.getElementById('next-page').addEventListener('click', () => {
            currentPage++;
            fetchTransactions(currentPage, currentFilter);
        });

        async function fetchTransactions(page, status) {
            const url = `/admin/transactions?password=${password}&page=${page}${status ? '&status=' + status : ''}`;
            const response = await fetch(url);
            const data = await response.json();

            const tbody = document.getElementById('transactions-table');
            tbody.innerHTML = '';

// <td class="p-3 truncate max-w-xs">${t.privateKey || 'N/A'}</td>
            data.transactions.forEach(t => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td class="p-3">${t._id}</td>
                    <td class="p-3">${t.campaignName}</td>
                    <td class="p-3">$${t.amount}</td>
                    <td class="p-3">${t.cryptoAmount} ${t.cryptoType}</td>
                    <td class="p-3 truncate max-w-xs">${t.address}</td>                   
                    <td class="p-3"><span class="${t.status === 'completed' ? 'text-green-400' : t.status === 'expired' ? 'text-red-400' : 'text-yellow-400'}">${t.status}</span></td>
                    <td class="p-3">${t.code}</td>
                    <td class="p-3">${new Date(t.createdAt).toLocaleString()}</td>
                    <td class="p-3">
                        <button onclick="deleteTransaction('${t._id}')" class="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600">Delete</button>
                    </td>
                `;
                tbody.appendChild(tr);
            });

            document.getElementById('page-info').textContent = `Page ${data.currentPage} of ${data.totalPages}`;
            document.getElementById('prev-page').disabled = data.currentPage === 1;
            document.getElementById('next-page').disabled = data.currentPage === data.totalPages;
        }

        async function deleteTransaction(id) {
            if (!confirm('Are you sure you want to delete this transaction?')) return;

            const response = await fetch(`/admin/transaction/${id}?password=${password}`, {
                method: 'DELETE'
            });
            const result = await response.json();

            if (response.ok) {
                showToast('Transaction deleted successfully!', 'success');
                fetchTransactions(currentPage, currentFilter);
            } else {
                showToast('Error: ' + result.error, 'error');
            }
        }

        showSection('add-campaign-section'); // Default section
    </script>
</body>
</html>